import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, renameSync } from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const renamePlugin = (): esbuild.Plugin => ({
	name: "rename-plugin",
	setup(build) {
		build.onEnd(async () => {
			try {
				copyFileSync("./styles.css", "./dist/styles.css");
				copyFileSync("./manifest.json", "./dist/manifest.json");
			} catch (e) {
				console.error("Failed to rename file:", e);
			}
		});
	},
});

const mode = process.argv[2];
const prod = mode === "production";
const e2e = mode === "e2e";
const e2eDev = mode === "e2e-dev";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	plugins: e2eDev || e2e ? [renamePlugin()] : [],
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "esnext",
	logLevel: "info",
	minify: prod,
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: e2eDev || e2e ? "dist/main.js" : "main.js",
});

if (prod || e2e) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
