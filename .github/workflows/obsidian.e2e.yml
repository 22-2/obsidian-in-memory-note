name: Obsidian E2E Test

on:
    workflow_dispatch:
    push:
        branches: ["main", "multiple-sandbox"]
    pull_request:
        branches: ["main", "multiple-sandbox"]

jobs:
    e2e-test:
        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, macos-latest]

        runs-on: ${{ matrix.os }}
        timeout-minutes: 15

        steps:
            - name: Check out repository
              uses: actions/checkout@v4
              with:
                  lfs: true

            - name: Set up pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 8

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  # Node.js 23は最新版ですが、安定性を重視する場合はLTS版（例: "20"）を推奨します
                  node-version: "23"
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install

            # --- ▼▼▼ 高速化のための変更点 ここから ▼▼▼ ---

            # Playwrightのブラウザをキャッシュして、ダウンロード時間を短縮します
            - name: Cache Playwright browsers
              uses: actions/cache@v4
              id: playwright-cache
              with:
                  # OSごとに異なるPlaywrightのキャッシュパスを指定します
                  path: |
                      %LOCALAPPDATA%/ms-playwright  # Windows
                      ~/Library/Caches/ms-playwright # macOS
                  # pnpm-lock.yamlのハッシュをキーに含めることで、Playwrightのバージョンが変わったらキャッシュが更新されます
                  key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-playwright-chromium-

            # --- ▲▲▲ 高速化のための変更点 ここまで ▲▲▲ ---

            - name: Install Playwright
              # キャッシュがある場合、このステップはブラウザの存在を確認するだけなので、一瞬で終わるようになります
              run: pnpm playwright install chromium

            # --- ▼▼▼ 高速化のための変更点 ここから ▼▼▼ ---

            # Windows用のjq実行ファイルをキャッシュします
            - name: Cache jq (Windows)
              if: runner.os == 'Windows'
              uses: actions/cache@v4
              id: jq-cache
              with:
                  path: jq.exe
                  key: jq-win64-latest

            # 元の "Install jq (Windows)" ステップを、キャッシュを利用するように変更しました
            - name: Install and setup jq (Windows)
              if: runner.os == 'Windows'
              shell: bash
              run: |
                  # キャッシュからリストアされなかった場合（jq.exeが存在しない場合）のみダウンロードします
                  if [[ ! -f "jq.exe" ]]; then
                    echo "jq not found in cache. Downloading..."
                    curl -L -o jq.exe https://github.com/jqlang/jq/releases/latest/download/jq-win64.exe
                  else
                    echo "jq found in cache."
                  fi
                  # jq.exeがあるカレントディレクトリをPATHに追加します
                  echo "${{ github.workspace }}" >> $GITHUB_PATH

            # --- ▲▲▲ 高速化のための変更点 ここまで ▲▲▲ ---

            - name: PWD # For debugging purposes
              shell: bash
              run: |
                  pwd

            - name: List project files # For debugging purposes
              shell: bash
              run: |
                  npx @telosh/filetree --exclude node_modules,.git

            - name: Prepare E2E test environment
              shell: bash
              run: |
                  chmod +x e2e-setup.sh
                  ./e2e-setup.sh

            - name: List project files # For debugging purposes
              shell: bash
              run: |
                  npx @telosh/filetree --exclude node_modules,.git

            - name: Run Playwright tests
              run: pnpm run test:e2e:install
              env:
                  DEBUG: "pw:browser"

            - name: Upload Playwright report
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-report-${{ matrix.os }}
                  path: playwright-report/
                  retention-days: 30
